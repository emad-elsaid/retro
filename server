#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler'

Bundler.require
require_relative 'helpers'

set :port, 3000
disable :strict_paths

boards = {}

get '/' do
  ensure_user

  defaults = {
    name: '',
    allowed_votes: 0,
    columns: ['Start', 'Stop', 'Continue', 'Kudos', 'Action Points'],
    order: 'votes',
    hide_votes: true,
    hide_cards: true
  }

  erb :index, locals: { board: defaults }
end

get '/mode/:mode' do
  cookies[:theme] = params[:mode]

  redirect back
end

get '/username' do
  erb :username
end

post '/username' do
  cookies[:username] = params[:username]
  cookies[:userid] = SecureRandom.uuid unless cookies.key?(:userid)

  redirect cookies[:back] || '/'
end

get '/boards/:board' do
  userid = ensure_user
  board = ensure_board(boards)

  erb :board, locals: {
    board: board,
    userid: userid,
    votes: remaining_votes(board, userid)
  }
end

post '/boards' do
  userid = ensure_user
  id = SecureRandom.uuid
  board = params.slice(:name, :columns, :allowed_votes, :countdown, :order).merge(id: id, userid: userid, cards: {})
  board[:columns] = board[:columns].lines.map(&:strip).reject(&:empty?)
  board[:allowed_votes] = board[:allowed_votes].to_i
  board[:countdown] = Time.now + board[:countdown].to_i * 60
  board[:hide_cards] = params.key?(:hide_cards)
  board[:hide_users] = params.key?(:hide_users)
  board[:hide_votes] = params.key?(:hide_votes)

  boards[id] = board

  redirect "/boards/#{id}"
end

get '/boards/:board/edit' do
  userid = ensure_user
  board = ensure_board(boards)
  redirect "/boards/#{board[:id]}" unless board[:userid] == userid

  erb :index, locals: { board: board }
end

post '/boards/:board' do
  userid = ensure_user
  board = ensure_board(boards)
  redirect "/boards/#{board[:id]}" unless board[:userid] == userid

  board.merge!(params.slice(:name, :columns, :allowed_votes, :countdown, :order))
  board[:columns] = board[:columns].lines.map(&:strip).reject(&:empty?)
  board[:allowed_votes] = board[:allowed_votes].to_i
  board[:countdown] = Time.now + board[:countdown].to_i * 60
  board[:hide_cards] = params.key?(:hide_cards)
  board[:hide_users] = params.key?(:hide_users)
  board[:hide_votes] = params.key?(:hide_votes)

  redirect "boards/#{board[:id]}"
end

post '/boards/:board/cards' do
  userid = ensure_user
  board = ensure_board(boards)

  board[:cards][SecureRandom.uuid] = params
                                     .slice(:column, :message)
                                     .merge(username: cookies[:username], userid: userid, votes: [])

  redirect "/boards/#{board[:id]}"
end

get '/boards/:board/cards/:card/edit' do
  userid = ensure_user
  board = ensure_board(boards)
  card = board[:cards][params[:card]]

  redirect "/boards/#{board[:id]}" unless card || card[:userid] == userid

  erb :card, locals: { board: board, card: card, id: params[:card] }
end

get '/boards/:board/cards/:card/merge' do
  userid = ensure_user
  board = ensure_board(boards)
  card = board[:cards][params[:card]]

  redirect "/boards/#{board[:id]}" unless board[:userid] == userid
  redirect "/boards/#{board[:id]}" unless card

  erb :merge, locals: {
    board: board,
    card_id: params[:card],
    card: card
  }
end

get '/boards/:board/cards/:card/merge/:other_card' do
  userid = ensure_user
  board = ensure_board(boards)
  card = board[:cards][params[:card]]
  other_card = board[:cards][params[:other_card]]

  redirect "/boards/#{board[:id]}" unless board[:userid] == userid
  redirect "/boards/#{board[:id]}" unless card
  redirect "/boards/#{board[:id]}" unless other_card

  other_card[:message] = "#{other_card[:message]} | #{card[:message]}"
  board[:cards].delete(params[:card])

  redirect "/boards/#{board[:id]}"
end

post '/boards/:board/cards/:card' do
  userid = ensure_user
  board = ensure_board(boards)
  card = board[:cards][params[:card]]
  redirect "/boards/#{board[:id]}" unless card || card[:userid] == userid

  card.merge!(params.slice(:column, :message))

  redirect "/boards/#{board[:id]}"
end

delete '/boards/:board/cards/:card' do
  userid = ensure_user
  board = ensure_board(boards)
  card = board[:cards][params[:card]]

  board[:cards].delete(params[:card]) if card[:userid] == userid

  redirect "/boards/#{board[:id]}"
end

post '/boards/:board/cards/:card/vote' do
  userid = ensure_user
  board = ensure_board(boards)
  card = board[:cards][params[:card]] || redirect("/#{board[:id]}")
  redirect "/boards/#{board[:id]}" if remaining_votes(board, userid) <= 0

  card[:votes] << userid

  redirect "/boards/#{board[:id]}"
end

delete '/boards/:board/cards/:card/vote' do
  userid = ensure_user
  board = ensure_board(boards)
  card = board[:cards][params[:card]] || redirect("/#{board[:id]}")

  index = card[:votes].find_index(userid)
  card[:votes].delete_at(index)

  redirect "/boards/#{board[:id]}"
end

get '/boards/:board/export/markdown' do
  board = ensure_board(boards)
  return "Can't export while cards are hidden" if board[:hide_cards]

  content_type 'text/markdown'
  erb :markdown, layout: false, locals: { board: board }
end

get '/boards/:board/countdown' do
  userid = ensure_user
  board = ensure_board(boards)
  remaining = [board[:countdown] - Time.now, 0].max

  headers['refresh'] = '5'
  erb :countdown, locals: { board: board, remaining: remaining, userid: userid }
end
