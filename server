#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'sinatra', require: false
  gem 'sinatra-contrib'
end

require 'sinatra'
require_relative 'helpers'

set :port, 3000
set :bind, '0.0.0.0'

boards = {}
cards = []

get '/' do
  erb :index
end

get '/username' do
  erb :username, locals: { back: request.referer }
end

post '/username' do
  cookies[:username] = params[:username]
  cookies[:userid] = SecureRandom.uuid unless cookies.key?(:userid)

  redirect params[:back]
end

get '/boards/:board' do
  userid = ensure_user
  board = ensure_board(boards)

  erb :board, locals: {
    board: board,
    cards: board_cards(board[:id], cards),
    userid: userid
  }
end

post '/boards' do
  id = SecureRandom.uuid
  board = params.slice(:name, :columns, :allowed_votes).merge(id: id)
  board[:columns] = board[:columns].lines.map(&:strip).reject(&:empty?)
  board[:allowed_votes] = board[:allowed_votes].to_i

  boards[id] = board

  redirect "/boards/#{id}"
end

post '/boards/:board/cards' do
  userid = ensure_user
  board = ensure_board(boards)

  cards << params
           .slice(:board, :column, :message)
           .merge(id: SecureRandom.uuid, username: cookies[:username], userid: userid, votes: [])

  redirect "/boards/#{board[:id]}"
end

get '/boards/:board/cards/:card/edit' do
  userid = ensure_user
  board = ensure_board(boards)

  card = cards.find { |c| c[:id] == params[:card] && c[:userid] == userid } || redirect("/boards/#{board[:id]}")

  erb :card, locals: { board: board, card: card }
end

post '/boards/:board/cards/:card' do
  userid = ensure_user
  board = ensure_board(boards)
  card = cards.find { |c| c[:id] == params[:card] && c[:userid] == userid } || redirect("/boards/#{board[:id]}")

  card.merge!(params.slice(:column, :message))

  redirect "/boards/#{board[:id]}"
end

delete '/boards/:board/cards/:card' do
  userid = ensure_user
  board = ensure_board(boards)

  cards.delete_if { |c| c[:id] == params[:card] && c[:userid] == userid }

  redirect "/boards/#{board[:id]}"
end

post '/boards/:board/cards/:card/vote' do
  userid = ensure_user
  board = ensure_board(boards)
  card = cards.find { |c| c[:id] == params[:card] } || redirect("/#{board[:id]}")
  redirect "/boards/#{board[:id]}" if remaining_votes(board, cards, userid) <= 0

  card[:votes] << userid

  redirect "/boards/#{board[:id]}"
end

delete '/boards/:board/cards/:card/vote' do
  userid = ensure_user
  board = ensure_board(boards)
  card = cards.find { |c| c[:id] == params[:card] } || redirect("/#{board[:id]}")

  card[:votes].delete(userid)

  redirect "/boards/#{board[:id]}"
end

get '/boards/:board/export/markdown' do
  board = ensure_board(boards)

  content_type 'text/markdown'
  erb :markdown, layout: false, locals: {
    board: board,
    cards: board_cards(board[:id], cards)
  }
end
